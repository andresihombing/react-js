{"version":3,"sources":["logo.svg","component/network/request.js","component/config/uri.js","component/network/resource.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","url","header","fetch","method","headers","then","response","json","responseJson","data","catch","error","body","Request","get","URI","res","Promise","resolve","reject","err","App","componentDidMount","a","getData","Resource","global","console","log","recovered","setState","confirmed","value","deaths","message","state","className","class","type","placeholder","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1f5fc10.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","class Request{\n    async get(url, header = {}){\n      let data = await fetch(url, {\n        method: 'GET',\n        headers: header,\n      })\n      .then((response) => response.json())\n      .then(responseJson => {\n        return {data: responseJson};\n      }).catch((error) =>{\n        return {error}\n      })\n  \n      return data;\n    }\n  \n    async post(url, header = {}, body = {}){\n      let data = await fetch(url, {\n        method: 'POST',\n        headers: header,\n        body: body,\n      })\n      .then((response) => response.json())\n      .then((responseJson) => {\n        return {responseJson};\n      }).catch((error) => {\n        return {error}\n      });\n  \n      return data;\n    }\n    \n    async put(url, header = {}, body = {}){\n      let data = await fetch(url, {\n        method: 'PUT',\n        headers: header,\n        body: body,\n      })\n      .then((response) => response.json())\n      .then((responseJson) => {\n        return {responseJson};\n      }).catch((error) => {\n        return {error}\n      });\n  \n      return data;\n    }\n    \n    async delete(url, header = {}){\n      let data = await fetch(url, {\n        method: 'DELETE',\n        headers: header\n      })\n      .then((response) => response.json())\n      .then((responseJson) => {\n        return {responseJson};\n      }).catch((error) => {\n        return {error}\n      });\n  \n      return data;\n    }\n  }\n  \n  export default new Request();","export default {    \n    API_BASE_URL: \"https://covid19.mathdro.id\",\n\n    global: '/api',\n    \n}","import Request from \"./request\";\nimport URI from \"../config/uri\"\n\nclass Resource {\n    async global(){\n        const header = {          \n          \"Content-Type\": \"application/json\",\n        }\n    \n        let res = await Request.get(URI.API_BASE_URL + URI.global);\n        \n        return new Promise((resolve, reject) => {\n          try{\n            resolve(res.data)\n          } catch (err) {\n            reject(\"An error occurred\")\n          }\n        });\n    }\n}\n\nexport default new Resource();","import React from 'react';\nimport logo from './logo.svg';\nimport styles from './App.css';\nimport Resource from './component/network/resource'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = { \n      confirmed : '',\n      recovered : '',\n      deaths : ''\n\n    }\n  }\n\n  componentDidMount = async () => {\n    this.getData();              \n  }  \n\n  getData = async () => {\n    try{                    \n        Resource.global()        \n          .then((res) => {                                 \n            console.log(res.recovered) \n            this.setState({\n              confirmed : res.confirmed.value,\n              recovered: res.recovered.value,\n              deaths : res.deaths.value\n            })\n          })\n          .catch((err) => {                                                                                          \n              console.log(err)\n          })        \n    } catch (error) {            \n        console.log(error)\n        console.log('AsyncStorage error: ' + error.message);\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">      \n        <header className=\"App-header\">        \n          <div class = \"container\">\n            <form class = \"example\">        \n              <input type=\"text\" placeholder=\"Pencarian Berdasarkan Negara . . .\" />\n              <button type=\"submit\"><i class=\"fa fa-search\"></i></button>\n            </form>\n            <div class = \"row\">\n              {/* <div class = \"col-md-6\"> */}\n              <div class = 'pull-left'>\n                <h2>Kasus Global</h2>\n              </div>\n              {/* </div> */}\n            </div>          \n          \n            <div class = \"col-md-4\">\n              <div class=\"panel panel-warning\">\n                <div class=\"panel-heading\">\n                  <h4>Terkonfirmasi</h4>\n                </div>\n                <div class=\"panel-heading\">{this.state.confirmed}</div>\n              </div>\n            </div>\n            <div class = \"col-md-4\">\n              <div class=\"panel panel-success\">\n              < div class=\"panel-heading\">\n                  <h4>Sembuh</h4>\n                </div>\n                <div class=\"panel-heading\">{this.state.recovered}</div>\n              </div>\n            </div>\n            <div class = \"col-md-4\">\n              <div class=\"panel panel-danger\">\n                <div class=\"panel-heading\">\n                  <h4>Meninggal</h4>\n                </div>\n                <div class=\"panel-heading\">{this.state.deaths}</div>\n              </div>\n            </div>          \n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}